# -*- coding: utf-8 -*-
"""
/***************************************************************************
 QuickApi
                                 A QGIS plugin
 Ejercicio para crear un plugin basado enconsultas a Open Elevation API
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-10-09
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Rober
        email                : estudiante@gis.es
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
#from qgis.PyQt.QtWidgets import QAction

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .quick_api_dialog import QuickApiDialog
import os.path

import requests
from PyQt5.QtWidgets import QAction, QMessageBox
from qgis.core import (QgsCoordinateReferenceSystem,
                       QgsCoordinateTransform,
                       QgsProject,
                       QgsRectangle,
                       QgsPointXY,
                       QgsGeometry,
                       QgsVectorLayer,
                       QgsFeature)



class QuickApi:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'QuickApi_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Quick API')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('QuickApi', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToVectorMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/quick_api/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Consulta Open Elevation API para coordenadas'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginVectorMenu(
                self.tr(u'&Quick API'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = QuickApiDialog()
            self.dlg.crs_input.setCrs(QgsCoordinateReferenceSystem(4326)) #crs_input es el nombre dado al elemento del formulario.
            #por defecto ponemos su valor al sistema de coordenadas 4326 (WGS84)
        
        project = QgsProject.instance() #referencia al proyecto activo en QGIS 

        # Recuperamos las capas incluidas en el proyecto. Deberíamos fijarnos en el id para tener un filtro adecuado. Pero solo es un ejemplo
        # Si no existe creamos una capa Vector para almacenar los datos. Dataprovider = memory. 
        # Generamos el tipo de geometria y además generamos los campos dirección (almacena el país) y licencia
        layers = project.mapLayersByName("Capa puntos")

        if len(layers) == 0:
            layer_out = QgsVectorLayer("Point?crs=EPSG:4326&field=address:string&field=license:string",
                                           "Capa puntos",
                                           "memory")
        else:
            layer_out = layers[0]
        

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Cuando pulsamos el botón Aceptar procesamos las coordenadas. 
            lineedit_text = self.dlg.lineedit_xy.value()
            crs_input = self.dlg.crs_input.crs()
            crs_out = QgsCoordinateReferenceSystem(4326)

            #Extraemos las coordenadas y generamos un el punto.
            point = self.get_coords(lineedit_text)

            if isinstance(point, QgsPointXY) == False:
                exit()
            

            #Si las coordenadas introducidas no están en WGS84, las transformamos a él.
            if crs_input.authid() != 'EPSG:4326':
                xform = QgsCoordinateTransform(crs_input,
                                                crs_out,
                                                project)
                point_transform = xform.transform(point)
                point = point_transform

            
            #Ahora pasamos a hacer una petición a open street map para que nos devuelva el la dirección correspondiente al punto.
            point_info = self.get_info_from_OSM(point)

            if point_info is None:
                exit()

            # Creamos la geometría y se la añadimos a la característica
            point_out = QgsPointXY(point_info['x'], point_info['y'])
            feature = QgsFeature()
            feature.setGeometry(QgsGeometry.fromPointXY(point_out))
            feature.setAttributes([point_info['address'], point_info['license']])

            # Añadimos la característica a la capa de salida y se lo pasamos al mapa
            layer_out.dataProvider().addFeature(feature)
            layer_out.updateExtents()
            project.addMapLayer(layer_out)

            # Construimos un autozoom
            ''' 
                bbox = [float(coord) for coord in response_json['boundingbox']]
                min_y, max_y, min_x, max_x = bbox
                bbox_geom = QgsGeometry.fromPolygonXY([[QgsPointXY(min_x, min_y),
                                                        QgsPointXY(min_x, max_y),
                                                        QgsPointXY(max_x, max_y),
                                                        QgsPointXY(max_x, min_y),
                                                       ]])
            '''
            
            # Transformamos esta caja que delimita el zoom si está en otro sistema de referencia de coordenadas
            '''
            if project.crs().authid() != 'EPSG:4326':
                xform = QgsCoordinateTransform(crs_out,
                                                   project.crs(),
                                                   project)
                bbox_geom.transform(xform)

            self.iface.mapCanvas().zoomToFeatureExtent(QgsRectangle.fromWkt(bbox_geom.asWkt()))
            '''


    def get_coords(self, concatenated_coords):
        try:
            yx = [float(coord.strip()) for coord in concatenated_coords.split(',')] #tratamos de procesar el input cortandolo por la coma
            point = QgsPointXY(*reversed(yx)) #Transformamos el punto en un formato valido para QGIS
            return point
        except:
            QMessageBox.critical(self.iface.mainWindow(),
                         'QuickAPI error',
                         "Introduce las coordenadas separadas por comas")
            return ""


    def get_info_from_OSM(self, point):
        result = {}

        user_agent = 'PyQGIS@GIS-OPS.com'
        base_url = 'https://nominatim.openstreetmap.org/reverse'
        params = {'lat': point.y(), 'lon': point.x(), 'format': 'json'}

        #Este servicio nos devuelve la dirección del punto
        response = requests.get(url=base_url, params=params, headers={'User-Agent': user_agent})
        response_json = response.json()

        #Procesamos la respuesta teniendo en cuenta el status devuelto por el servidor. 
        if response.status_code == 200:
            #No debería darse un error con status 200, pero dice la web que puede pasar
            if response_json.get('error'):
                QMessageBox.critical(self.iface.mainWindow(),
                                         "Quick API error",
                                         "Petición incorrecta!\n\n"
                                         "Mensaje:\n"
                                         "{}".format(response.json()))

                result['x'] = 0
                result['y'] = 0
                result['address'] = ""
                result['license'] = ""
                return result

            # Datos devueltos
            result['x'] = float(response_json['lon'])
            result['y'] = float(response_json['lat'])
            result['address'] = response_json['display_name']
            result['license'] = response_json['licence']
        
        print(result)
        
        return result
